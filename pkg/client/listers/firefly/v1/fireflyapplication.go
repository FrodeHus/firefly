/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/frodehus/firefly/pkg/apis/firefly/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FireflyApplicationLister helps list FireflyApplications.
type FireflyApplicationLister interface {
	// List lists all FireflyApplications in the indexer.
	List(selector labels.Selector) (ret []*v1.FireflyApplication, err error)
	// FireflyApplications returns an object that can list and get FireflyApplications.
	FireflyApplications(namespace string) FireflyApplicationNamespaceLister
	FireflyApplicationListerExpansion
}

// fireflyApplicationLister implements the FireflyApplicationLister interface.
type fireflyApplicationLister struct {
	indexer cache.Indexer
}

// NewFireflyApplicationLister returns a new FireflyApplicationLister.
func NewFireflyApplicationLister(indexer cache.Indexer) FireflyApplicationLister {
	return &fireflyApplicationLister{indexer: indexer}
}

// List lists all FireflyApplications in the indexer.
func (s *fireflyApplicationLister) List(selector labels.Selector) (ret []*v1.FireflyApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FireflyApplication))
	})
	return ret, err
}

// FireflyApplications returns an object that can list and get FireflyApplications.
func (s *fireflyApplicationLister) FireflyApplications(namespace string) FireflyApplicationNamespaceLister {
	return fireflyApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FireflyApplicationNamespaceLister helps list and get FireflyApplications.
type FireflyApplicationNamespaceLister interface {
	// List lists all FireflyApplications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.FireflyApplication, err error)
	// Get retrieves the FireflyApplication from the indexer for a given namespace and name.
	Get(name string) (*v1.FireflyApplication, error)
	FireflyApplicationNamespaceListerExpansion
}

// fireflyApplicationNamespaceLister implements the FireflyApplicationNamespaceLister
// interface.
type fireflyApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FireflyApplications in the indexer for a given namespace.
func (s fireflyApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1.FireflyApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.FireflyApplication))
	})
	return ret, err
}

// Get retrieves the FireflyApplication from the indexer for a given namespace and name.
func (s fireflyApplicationNamespaceLister) Get(name string) (*v1.FireflyApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("fireflyapplication"), name)
	}
	return obj.(*v1.FireflyApplication), nil
}
